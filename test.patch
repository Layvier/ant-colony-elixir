diff --git a/.formatter.exs b/.formatter.exs
new file mode 100644
index 0000000..d2cda26
--- /dev/null
+++ b/.formatter.exs
@@ -0,0 +1,4 @@
+# Used by "mix format"
+[
+  inputs: ["{mix,.formatter}.exs", "{config,lib,test}/**/*.{ex,exs}"]
+]
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..58afed3
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,24 @@
+# The directory Mix will write compiled artifacts to.
+/_build/
+
+# If you run "mix test --cover", coverage assets end up here.
+/cover/
+
+# The directory Mix downloads your dependencies sources to.
+/deps/
+
+# Where third-party dependencies like ExDoc output generated docs.
+/doc/
+
+# Ignore .fetch files in case you like to edit your project deps locally.
+/.fetch
+
+# If the VM crashes, it generates a dump, let's ignore it too.
+erl_crash.dump
+
+# Also ignore archive artifacts (built via "mix archive.build").
+*.ez
+
+# Ignore package tarball (built via "mix hex.build").
+ant_colony-*.tar
+
diff --git a/README.md b/README.md
index e1029b0..a3289db 100644
--- a/README.md
+++ b/README.md
@@ -3,4 +3,18 @@
 ## Description
 I built this project in order to learn elixir. It uses different aspect of the language and leverages Erlang's OTP for parallelism. 
 
-I implemented the Ant System version of the ACO meta-heuristic (http://mat.uab.cat/~alseda/MasterOpt/ACO_Intro.pdf).
\ No newline at end of file
+I implemented the Ant System version of the ACO meta-heuristic (http://mat.uab.cat/~alseda/MasterOpt/ACO_Intro.pdf).
+
+## Installation
+To start the project, run 
+
+`mix compile && mix run --no-halt`
+
+or
+
+`iex -S mix`
+
+The default instance used is Berlin52.
+You can select another instance (from the instances folder) using the **INSTANCE** environment variable:
+
+`INSTANCE=a280 iex -S mix`
diff --git a/instances/a280.tsp b/instances/a280.tsp
new file mode 100644
index 0000000..18f70fa
--- /dev/null
+++ b/instances/a280.tsp
@@ -0,0 +1,287 @@
+NAME : a280
+COMMENT : drilling problem (Ludwig)
+TYPE : TSP
+DIMENSION: 280
+EDGE_WEIGHT_TYPE : EUC_2D
+NODE_COORD_SECTION
+  1 288 149
+  2 288 129
+  3 270 133
+  4 256 141
+  5 256 157
+  6 246 157
+  7 236 169
+  8 228 169
+  9 228 161
+ 10 220 169
+ 11 212 169
+ 12 204 169
+ 13 196 169
+ 14 188 169
+ 15 196 161
+ 16 188 145
+ 17 172 145
+ 18 164 145
+ 19 156 145
+ 20 148 145
+ 21 140 145
+ 22 148 169
+ 23 164 169
+ 24 172 169
+ 25 156 169
+ 26 140 169
+ 27 132 169
+ 28 124 169
+ 29 116 161
+ 30 104 153
+ 31 104 161
+ 32 104 169
+ 33  90 165
+ 34  80 157
+ 35  64 157
+ 36  64 165
+ 37  56 169
+ 38  56 161
+ 39  56 153
+ 40  56 145
+ 41  56 137
+ 42  56 129
+ 43  56 121
+ 44  40 121
+ 45  40 129
+ 46  40 137
+ 47  40 145
+ 48  40 153
+ 49  40 161
+ 50  40 169
+ 51  32 169
+ 52  32 161
+ 53  32 153
+ 54  32 145
+ 55  32 137
+ 56  32 129
+ 57  32 121
+ 58  32 113
+ 59  40 113
+ 60  56 113
+ 61  56 105
+ 62  48  99
+ 63  40  99
+ 64  32  97
+ 65  32  89
+ 66  24  89
+ 67  16  97
+ 68  16 109
+ 69   8 109
+ 70   8  97
+ 71   8  89
+ 72   8  81
+ 73   8  73
+ 74   8  65
+ 75   8  57
+ 76  16  57
+ 77   8  49
+ 78   8  41
+ 79  24  45
+ 80  32  41
+ 81  32  49
+ 82  32  57
+ 83  32  65
+ 84  32  73
+ 85  32  81
+ 86  40  83
+ 87  40  73
+ 88  40  63
+ 89  40  51
+ 90  44  43
+ 91  44  35
+ 92  44  27
+ 93  32  25
+ 94  24  25
+ 95  16  25
+ 96  16  17
+ 97  24  17
+ 98  32  17
+ 99  44  11
+100  56   9
+101  56  17
+102  56  25
+103  56  33
+104  56  41
+105  64  41
+106  72  41
+107  72  49
+108  56  49
+109  48  51
+110  56  57
+111  56  65
+112  48  63
+113  48  73
+114  56  73
+115  56  81
+116  48  83
+117  56  89
+118  56  97
+119 104  97
+120 104 105
+121 104 113
+122 104 121
+123 104 129
+124 104 137
+125 104 145
+126 116 145
+127 124 145
+128 132 145
+129 132 137
+130 140 137
+131 148 137
+132 156 137
+133 164 137
+134 172 125
+135 172 117
+136 172 109
+137 172 101
+138 172  93
+139 172  85
+140 180  85
+141 180  77
+142 180  69
+143 180  61
+144 180  53
+145 172  53
+146 172  61
+147 172  69
+148 172  77
+149 164  81
+150 148  85
+151 124  85
+152 124  93
+153 124 109
+154 124 125
+155 124 117
+156 124 101
+157 104  89
+158 104  81
+159 104  73
+160 104  65
+161 104  49
+162 104  41
+163 104  33
+164 104  25
+165 104  17
+166  92   9
+167  80   9
+168  72   9
+169  64  21
+170  72  25
+171  80  25
+172  80  25
+173  80  41
+174  88  49
+175 104  57
+176 124  69
+177 124  77
+178 132  81
+179 140  65
+180 132  61
+181 124  61
+182 124  53
+183 124  45
+184 124  37
+185 124  29
+186 132  21
+187 124  21
+188 120   9
+189 128   9
+190 136   9
+191 148   9
+192 162   9
+193 156  25
+194 172  21
+195 180  21
+196 180  29
+197 172  29
+198 172  37
+199 172  45
+200 180  45
+201 180  37
+202 188  41
+203 196  49
+204 204  57
+205 212  65
+206 220  73
+207 228  69
+208 228  77
+209 236  77
+210 236  69
+211 236  61
+212 228  61
+213 228  53
+214 236  53
+215 236  45
+216 228  45
+217 228  37
+218 236  37
+219 236  29
+220 228  29
+221 228  21
+222 236  21
+223 252  21
+224 260  29
+225 260  37
+226 260  45
+227 260  53
+228 260  61
+229 260  69
+230 260  77
+231 276  77
+232 276  69
+233 276  61
+234 276  53
+235 284  53
+236 284  61
+237 284  69
+238 284  77
+239 284  85
+240 284  93
+241 284 101
+242 288 109
+243 280 109
+244 276 101
+245 276  93
+246 276  85
+247 268  97
+248 260 109
+249 252 101
+250 260  93
+251 260  85
+252 236  85
+253 228  85
+254 228  93
+255 236  93
+256 236 101
+257 228 101
+258 228 109
+259 228 117
+260 228 125
+261 220 125
+262 212 117
+263 204 109
+264 196 101
+265 188  93
+266 180  93
+267 180 101
+268 180 109
+269 180 117
+270 180 125
+271 196 145
+272 204 145
+273 212 145
+274 220 145
+275 228 145
+276 236 145
+277 246 141
+278 252 125
+279 260 129
+280 280 133
+EOF
\ No newline at end of file
diff --git a/instances/berlin52.tsp b/instances/berlin52.tsp
new file mode 100644
index 0000000..0fc954c
--- /dev/null
+++ b/instances/berlin52.tsp
@@ -0,0 +1,59 @@
+NAME: berlin52
+TYPE: TSP
+COMMENT: 52 locations in Berlin (Groetschel). Best: 7542
+DIMENSION: 52
+EDGE_WEIGHT_TYPE: EUC_2D
+NODE_COORD_SECTION
+1 565.0 575.0
+2 25.0 185.0
+3 345.0 750.0
+4 945.0 685.0
+5 845.0 655.0
+6 880.0 660.0
+7 25.0 230.0
+8 525.0 1000.0
+9 580.0 1175.0
+10 650.0 1130.0
+11 1605.0 620.0 
+12 1220.0 580.0
+13 1465.0 200.0
+14 1530.0 5.0
+15 845.0 680.0
+16 725.0 370.0
+17 145.0 665.0
+18 415.0 635.0
+19 510.0 875.0  
+20 560.0 365.0
+21 300.0 465.0
+22 520.0 585.0
+23 480.0 415.0
+24 835.0 625.0
+25 975.0 580.0
+26 1215.0 245.0
+27 1320.0 315.0
+28 1250.0 400.0
+29 660.0 180.0
+30 410.0 250.0
+31 420.0 555.0
+32 575.0 665.0
+33 1150.0 1160.0
+34 700.0 580.0
+35 685.0 595.0
+36 685.0 610.0
+37 770.0 610.0
+38 795.0 645.0
+39 720.0 635.0
+40 760.0 650.0
+41 475.0 960.0
+42 95.0 260.0
+43 875.0 920.0
+44 700.0 500.0
+45 555.0 815.0
+46 830.0 485.0
+47 1170.0 65.0
+48 830.0 610.0
+49 605.0 625.0
+50 595.0 360.0
+51 1340.0 725.0
+52 1740.0 245.0
+EOF
\ No newline at end of file
diff --git a/lib/ant.ex b/lib/ant.ex
new file mode 100644
index 0000000..79e3eef
--- /dev/null
+++ b/lib/ant.ex
@@ -0,0 +1,57 @@
+defmodule Ant do
+  use GenServer
+
+  def start_link(opts) do
+    IO.puts("Starting " <> Atom.to_string(opts[:name]))
+    GenServer.start_link(__MODULE__, {:ok, opts[:state]}, opts)
+  end
+
+  def init({:ok, state}) do
+    state = Map.put(state, :path, [0])
+    state = Map.put(state, :path_cost, 0)
+    
+    {:ok, walk(state)}
+  end
+
+  def walk(state) do
+    new_state = rec_walk_next_node(state, Enum.to_list(1..(state[:n] - 1)))
+    
+    PheromonTrails.send_ant_path(self(), new_state[:path], new_state[:path_cost])
+    new_state
+  end
+
+  def handle_cast({:walk, new_pheromons}, state) do
+    new_state = walk(%{state | pheromons: new_pheromons , path_cost: 0 , path: [0]})
+    {:noreply, new_state}
+  end
+
+  def rec_walk_next_node(state, []) do
+    current_node = List.last(state[:path])
+    new_node = 0
+    new_path = state[:path] ++ [ new_node ]
+    new_cost = state[:path_cost] + SymetricGraph.get_value(state[:graph], current_node, new_node)
+    %{%{state | path: new_path} | path_cost: new_cost}
+  end
+
+  def rec_walk_next_node(state, nodes_left) do
+    current_node = List.last(state[:path])
+    new_node = choose_next_node(SymetricGraph.get_row(state[:pheromons], current_node), SymetricGraph.get_row(state[:graph], current_node), nodes_left)
+    
+    new_path = state[:path] ++ [ new_node ]
+    new_cost = state[:path_cost] + SymetricGraph.get_value(state[:graph], current_node, new_node)
+    rec_walk_next_node(%{%{state | path: new_path} | path_cost: new_cost}, Enum.filter(nodes_left, fn (n) -> n != new_node end))
+  end
+
+  def choose_next_node(pheromon_next_nodes, distance_next_nodes, nodes_left) do
+    # use real formula, including desirability
+    next_nodes_probabilities_unnormalized = Range.new(0, Enum.count(pheromon_next_nodes) - 1)
+      |> Enum.map(fn(i) -> if Enum.member?(nodes_left, i), do: Enum.at(pheromon_next_nodes, i) / (Enum.at(distance_next_nodes, i) + 1), else: 0 end) # 
+
+    normalizer = Enum.reduce(next_nodes_probabilities_unnormalized, 0, fn (p, a) -> p + a end)
+    buckets = Enum.reduce(next_nodes_probabilities_unnormalized, [], fn (p, acc) -> acc ++ [(List.last(acc) || 0) + p / normalizer] end)
+    # pick a number between 0 and 1
+    random_value = :rand.uniform()
+    {_, _, found} = Enum.reduce(buckets, {0, 0, nil}, fn (next, {ind, prev, found}) -> if (prev <= random_value and random_value < next), do: {ind + 1, next, ind}, else: {ind + 1, next, found} end)#if (prev <= random_value and random_value <= next), do: {ind++, next, ind}, else: {ind++, next, found} end)
+    found
+  end
+end
\ No newline at end of file
diff --git a/lib/ant_colony_supervisor.ex b/lib/ant_colony_supervisor.ex
new file mode 100644
index 0000000..0447693
--- /dev/null
+++ b/lib/ant_colony_supervisor.ex
@@ -0,0 +1,23 @@
+defmodule AntColonySupervisor do
+  use Supervisor
+
+  def start_link(opts) do
+    Supervisor.start_link(__MODULE__, {:ok, opts[:graph], opts[:n]}, opts)
+  end
+
+  def init({:ok, graph, n}) do
+    pheromons = SymetricGraph.new(n, 1/(n - 1))
+
+    initial_state = %{
+      graph: graph,
+      pheromons: pheromons,
+      n: n,
+      nb_ants: 5
+    }
+    children = [
+      {PheromonTrails, name: PheromonTrails, state: initial_state},
+      {Colony, name: Colony, state: initial_state},
+    ]
+    Supervisor.init(children, strategy: :one_for_one)
+  end
+end
diff --git a/lib/app.ex b/lib/app.ex
new file mode 100644
index 0000000..32397ab
--- /dev/null
+++ b/lib/app.ex
@@ -0,0 +1,36 @@
+defmodule App do
+  use Application
+
+  def start(_type, _args) do
+    {graph, n} = read_instance(System.get_env("INSTANCE") || "berlin52")
+    AntColonySupervisor.start_link(name: AntColonySupervisor, graph: graph, n: n)
+  end
+
+  def read_instance(filename) do
+    {:ok, body} = File.read("./instances/#{filename}.tsp")
+    lines = String.split(body, "\n")
+
+    points_coord = lines
+      |> Enum.drop(6)
+      |> Enum.drop(-1)
+      |> Enum.map(&parse_point/1)
+
+    n = Enum.count(points_coord)
+
+    graph = for a <- 0..(n - 1), b <- 0..(n - 1), a <= b, into: SymetricGraph.new do
+      {i_a, j_a} = Enum.at(points_coord, a)
+      {i_b, j_b} = Enum.at(points_coord, b)
+      {{a, b}, :math.sqrt( :math.pow(i_a - i_b, 2) + :math.pow(j_a - j_b, 2))}
+    end
+    {graph, n}
+  end
+
+  def parse_point(point) do
+    [_, i, j] = String.split(point)
+    try do
+      {String.to_float(i), String.to_float(j)}
+    rescue
+      e in ArgumentError -> {String.to_integer(i), String.to_integer(j)}
+    end
+  end
+end
\ No newline at end of file
diff --git a/lib/colony.ex b/lib/colony.ex
new file mode 100644
index 0000000..1ee6e32
--- /dev/null
+++ b/lib/colony.ex
@@ -0,0 +1,19 @@
+defmodule Colony do
+  use Supervisor
+
+  def start_link(opts) do
+    Supervisor.start_link(__MODULE__, {:ok, opts[:state]}, opts)
+  end
+
+  def init({:ok, state}) do
+    children = Range.new(1, state.nb_ants)
+      |> Enum.map(fn(ant_id) -> 
+        %{
+        id: ant_id,
+        start: {Ant, :start_link, [[name: String.to_atom("ant_#{ant_id}"), state: state]]}
+      } 
+    end)
+
+    Supervisor.init(children, strategy: :one_for_one)
+  end
+end
\ No newline at end of file
diff --git a/lib/graph.ex b/lib/graph.ex
new file mode 100644
index 0000000..b1cf466
--- /dev/null
+++ b/lib/graph.ex
@@ -0,0 +1,43 @@
+defmodule SymetricGraph do
+  # TODO: Use struct, to pattern match + add n + ensure the functions are only used with the correct struct
+  def new do
+    %{}
+  end
+
+  def new(n, default_value) do
+    for a <- 0..(n - 1), b <- 0..(n - 1), a <= b, into: SymetricGraph.new do
+      {{a, b}, default_value}
+    end  
+  end
+
+  def get_value(graph, i, j) when i > j do
+    get_value(graph, j, i)
+  end
+
+  def get_value(graph, i, j) do
+    Map.get(graph, {i, j})
+  end
+
+  def set_value(graph, i, j, value) when i > j do
+    set_value(graph, j, i, value)
+  end
+
+  def set_value(graph, i, j, value) do
+    Map.put(graph, {i, j}, value)
+  end
+
+  def get_row(graph, row) do
+    graph 
+    |> Enum.filter(fn({{i, j}, value}) -> i == row || j == row end)
+    |> Enum.map(fn ({{i, j}, value}) -> 
+      col = if i == row, do: j, else: i
+      {col, value}
+    end)
+    |> Enum.sort(fn ({cola, _}, {colb, _}) -> cola < colb end)
+    |> Enum.map(fn({col, value}) -> value end)
+  end
+
+  def apply_to_all(graph, transformation) do
+    graph |> Enum.reduce(graph, fn ({{i, j}, value}, acc) -> Map.put(acc, {i,j}, transformation.(value)) end)
+  end
+end
\ No newline at end of file
diff --git a/lib/pheromon_trails.ex b/lib/pheromon_trails.ex
new file mode 100644
index 0000000..0124a65
--- /dev/null
+++ b/lib/pheromon_trails.ex
@@ -0,0 +1,66 @@
+defmodule PheromonTrails do
+  use GenServer
+
+  def start_link(opts) do
+    GenServer.start_link(__MODULE__, opts[:state], name: opts[:name])
+  end
+
+  def init(%{pheromons: pheromons, nb_ants: nb_ants}) do
+    IO.puts("starting Colony")
+    {:ok, %{
+      pheromons: pheromons,
+      counter: 0 ,
+      evaporation_rate: 0.005 ,
+      nb_ants: nb_ants,
+      best_solution: nil
+      }}
+  end
+
+  def handle_cast({:new_ant_path, path, cost, from}, state) do
+    new_pheromons = state[:pheromons] 
+      |> evaporate_pheromons(state[:evaporation_rate], state[:nb_ants]) 
+      |> rec_add_next_pheromon(path, cost)
+
+    GenServer.cast(from, {:walk, new_pheromons})
+    new_counter = state[:counter] + 1
+    new_state = %{state | pheromons: new_pheromons}
+    {:noreply, %{new_state | counter: new_counter, best_solution: record_best_tour(state[:best_solution], path, cost)}}
+  end
+
+  def evaporate_pheromons(pheromons, evaporation_rate, nb_ants) do
+    # not exactly as real formula, since we don't wait for all ants to finish
+    SymetricGraph.apply_to_all(pheromons, fn (pheromon_val) -> pheromon_val * (1 - evaporation_rate / nb_ants) end)
+  end
+
+  def rec_add_next_pheromon(pheromons, [0], cost) do
+    pheromons
+  end
+
+  def rec_add_next_pheromon(pheromons, path, cost) do
+    [i | new_path] = path
+    new_pheromons = set_pheromon_value(pheromons, i, List.first(new_path), cost)
+    rec_add_next_pheromon(new_pheromons, new_path, cost)
+  end
+
+  def send_ant_path(from, path, cost) do
+    GenServer.cast(__MODULE__, {:new_ant_path, path, cost, from})
+  end
+
+  def set_pheromon_value(pheromons, i, j, path_cost) do
+    current_pheromon_value = SymetricGraph.get_value(pheromons, i, j)
+    SymetricGraph.set_value(pheromons, i, j, current_pheromon_value + 1 / path_cost)
+  end
+
+  def record_best_tour(current_best_solution, path, cost) do
+    if current_best_solution == nil or cost < current_best_solution.cost do
+      IO.puts("New best solution: #{cost}")
+      IO.inspect(path)
+      %{
+        path: path,
+        cost: cost
+      }
+    else
+      current_best_solution
+    end
+  end
+end
\ No newline at end of file
diff --git a/mix.exs b/mix.exs
new file mode 100644
index 0000000..d3d0493
--- /dev/null
+++ b/mix.exs
@@ -0,0 +1,29 @@
+defmodule AntColony.MixProject do
+  use Mix.Project
+
+  def project do
+    [
+      app: :ant_colony,
+      version: "0.1.0",
+      elixir: "~> 1.9",
+      start_permanent: Mix.env() == :prod,
+      deps: deps()
+    ]
+  end
+
+  # Run "mix help compile.app" to learn about applications.
+  def application do
+    [
+      extra_applications: [:logger],
+      mod: {App, []}
+    ]
+  end
+
+  # Run "mix help deps" to learn about dependencies.
+  defp deps do
+    [
+      # {:dep_from_hexpm, "~> 0.3.0"},
+      # {:dep_from_git, git: "https://github.com/elixir-lang/my_dep.git", tag: "0.1.0"}
+    ]
+  end
+end
diff --git a/test/ant_colony_test.exs b/test/ant_colony_test.exs
new file mode 100644
index 0000000..fdc9306
--- /dev/null
+++ b/test/ant_colony_test.exs
@@ -0,0 +1,8 @@
+defmodule AntColonyTest do
+  use ExUnit.Case
+  doctest AntColony
+
+  test "greets the world" do
+    assert AntColony.hello() == :world
+  end
+end
diff --git a/test/test_helper.exs b/test/test_helper.exs
new file mode 100644
index 0000000..869559e
--- /dev/null
+++ b/test/test_helper.exs
@@ -0,0 +1 @@
+ExUnit.start()
